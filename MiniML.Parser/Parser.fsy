%{ 
open MiniML.AbstractSyntaxTree


#if DEBUG
let debugPrint s = printfn "### %s" s
#else
let debugPrint s = ignore s
#endif

%}
 
%start File
 
%token DUMMY

// terminal tokens
%token COMMA SEMICOLON
%token <decimal> NUMBER
%token <string> SYMBOL
%token PLUS MINUS TIMES DIVIDE LPAREN RPAREN EQUAL NOT_EQUAL LT GT LT_EQUAL GT_EQUAL
%token AND OR
%token EOF

%token MODULE
%token LET
%token BIND
%token RETURN

%token IF THEN ELSE

%token BLOCKSEP
%token BLOCKBEGIN
%token BLOCKEND

// associativity and precedences
%left AND OR
%left PLUS MINUS 
%left TIMES DIVIDE
%left EQUAL NOT_EQUAL LT GT LT_EQUAL GT_EQUAL

// return type of Expr
%type <MiniML.AbstractSyntaxTree.File> File
%type <string> Module
%type <Statement list> Statements
%type <Statement> Statement
%type <Statement> LetStatement
%type <Statement> ReturnStatement
%type <Expression> Expression

%% 

File: BLOCKBEGIN
        Module BLOCKSEP
        Statements
      BLOCKEND
      EOF { Module ($2, $4) }

Module: MODULE SYMBOL { $2 }

Statements: Statement { debugPrint $"Statement1 {$1}" ; [ $1 ] }
          | Statements BLOCKSEP Statement { debugPrint $"Statement2  {$1}  {$3}" ; $1 @ [ $3 ] }

Statement: LetStatement { $1 }
         | ReturnStatement { $1 }
         | IfThenElseStatement { $1 }

LetStatement: LET SYMBOL BIND BLOCKBEGIN Statements BLOCKEND { Let ($2, $5) }

ReturnStatement: Expression { Return $1 }

IfThenElseStatement: IF Expression THEN BLOCKBEGIN Statements BLOCKEND { IfThenElse ($2, $5, []) }
                   | IF Expression THEN BLOCKBEGIN Statements BLOCKEND 
                     BLOCKSEP ELSE BLOCKBEGIN Statements BLOCKEND { IfThenElse ($2, $5, $10) }

Expression: NUMBER                  { Number $1 }
          | SYMBOL                  { Symbol $1 }
          | Expression PLUS Expression          { Function (Plus, $1, $3) } 
          | Expression MINUS Expression         { Function (Minus, $1, $3) } 
          | Expression TIMES Expression         { Function (Times, $1, $3) } 
          | Expression DIVIDE Expression        { Function (Divide, $1, $3) }

          | Expression EQUAL Expression        { Function (Equal, $1, $3) }
          | Expression NOT_EQUAL Expression        { Function (NotEqual, $1, $3) }
          | Expression LT Expression        { Function (LowerThan, $1, $3) }
          | Expression LT_EQUAL Expression        { Function (LowerThanOrEqual, $1, $3) }
          | Expression GT Expression        { Function (GreaterThan, $1, $3) }
          | Expression GT_EQUAL Expression        { Function (GreaterThanOrEqual, $1, $3) }

          | Expression AND Expression        { Function (And, $1, $3) }
          | Expression OR Expression        { Function (Or, $1, $3) }

          | LPAREN Expression RPAREN      { $2 }
          | SYMBOL LPAREN CallTupleArgs RPAREN { FunctionCall ($1, $3) }
          | SYMBOL CallPartialArgs { PartialFunctionCall ($1, $2) }

CallTupleArgs: { [] }
        | CallArgs { $1 }

CallArgs: Expression { [$1] }
        | CallArgs COMMA Expression { $1 @ [ $3 ] }

CallPartialArgs: Expression { [$1] }
               | CallPartialArgs Expression { $1 @ [ $2 ] }
