%{ 
open MiniML.AbstractSyntaxTree

#if DEBUG
let debugPrint s = printfn "### %s" s
#else
let debugPrint s = ignore s
#endif


%}
 
%start File

// terminal tokens
%token COMMA SEMICOLON COLON PIPE
%token <decimal> NUMBER
%token <string> ID
%token LPAREN RPAREN 
%token LSQBRACKET RSQBRACKET
%token PLUS MINUS TIMES DIVIDE EQUAL NOT_EQUAL LT GT LT_EQUAL GT_EQUAL
%token AND OR
%token EOF

%token MODULE
%token LET
%token RETURN

%token IF THEN ELSE
%token MATCH WITH FAT_ARROW LIGHT_ARROW
%token WHILE DO
%token FOR IN
%token FUN

%token INDENT DEDENT NEWLINE

// associativity and precedences
%left AND OR
%left PLUS MINUS 
%left TIMES DIVIDE
%left EQUAL NOT_EQUAL LT GT LT_EQUAL GT_EQUAL


// return type of Expr
%type <MiniML.AbstractSyntaxTree.File> File

%% 

File:
    MODULE ID NEWLINE
    Statements
    EOF { File.Module ($2, $4) }

Statements:
    | Statement { [$1] }
    | Statements NEWLINE Statement { $1 @ [$3] }

Statement:
    | LetStatement { $1 }
    | ExpressionStatement { $1 }
    | IfStatement { $1 }
    | MatchStatement { $1 }
    | WhileStatement { $1 }
    | ForStatement { $1 }

IfStatement:
    | IF Expression THEN BlockStatements Else { Statement.IfThenElse ($2, $4, $5) }

Else:
    | /* empty */ { [] }
    | NEWLINE ELSE BlockStatements { $3 }

BlockStatements:
    | Statement { [$1] }
    | INDENT Statements DEDENT { $2 }
 
LetStatement:
    | LET Binding EQUAL BlockStatements { Statement.Let ($2, $4) }

ExpressionStatement:
    | Expression { Statement.Return $1 }


MatchStatement:
    | MATCH Expression WITH INDENT MatchCases DEDENT { Statement.Match ($2, $5) }

MatchCases:
    | MatchCase { [$1] }
    | MatchCases NEWLINE MatchCase { $1 @ [ $3 ] }

MatchCase:
    | Expression LIGHT_ARROW BlockStatements { $1, $3 }

WhileStatement:
    | WHILE Expression DO BlockStatements { Statement.While ($2, $4) }

ForStatement:
    | FOR Binding IN Expression DO BlockStatements { Statement.For ($2, $4, $6) }

Binding:
    | ID { Binding.Symbol $1 }

Expression:
    | NUMBER { Expression.Number $1 }
    | ID { Expression.Symbol $1 }
    | Expression PLUS Expression { Expression.Operator (Operator.Plus, $1, $3) }
    | Expression MINUS Expression { Expression.Operator (Operator.Minus, $1, $3) }
    | Expression TIMES Expression { Expression.Operator (Operator.Times, $1, $3) }
    | Expression DIVIDE Expression { Expression.Operator (Operator.Divide, $1, $3) }
    | Expression EQUAL Expression { Expression.Operator (Operator.Equal, $1, $3) }
    | Expression NOT_EQUAL Expression { Expression.Operator (Operator.NotEqual, $1, $3) }
    | Expression LT Expression { Expression.Operator (Operator.LowerThan, $1, $3) }
    | Expression LT_EQUAL Expression { Expression.Operator (Operator.LowerThanOrEqual, $1, $3) }
    | Expression GT Expression { Expression.Operator (Operator.GreaterThan, $1, $3) }
    | Expression GT_EQUAL Expression { Expression.Operator (Operator.GreaterThanOrEqual, $1, $3) }
    | Expression AND Expression { Expression.Operator (Operator.And, $1, $3) }
    | Expression OR Expression { Expression.Operator (Operator.Or, $1, $3) }
    | LPAREN Expression RPAREN { $2 }
    | ID Tuple { Expression.Invoke ($1, $2) }
    | FUN Binding LIGHT_ARROW BlockStatements { Expression.Function ($2, $4) }
    | Tuple { Expression.Tuple $1 }
    | List { Expression.List $1 }

List:
    LSQBRACKET Values RSQBRACKET { $2 }

Tuple:
    LPAREN Values RPAREN { $2 }

Values:
    | /* empty */ { [] }
    | Expression { [$1] }
    | Values COMMA Expression { $1 @ [ $3 ] }
